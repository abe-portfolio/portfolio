use proconio::input;

fn main() {
    // 標準入力から n, t, 配列 a を読み取る
    input! {
        n: usize,          // ビンゴカードのサイズ
        t: usize,          // ターン数
        a: [i32; t],       // ターンごとに選択される数字の配列
    };

    // ビンゴカードの生成（1から n*n までの数字が配置される）
    let mut marked = vec![vec![false; n]; n]; // マークされたセルを管理する配列
    let mut row_counts = vec![0; n];          // 各行（→）にマークされたセルの数を保持する配列
    let mut col_counts = vec![0; n];          // 各列（↓）にマークされたセルの数を保持する配列
    let mut diag1_count = 0;                  // 左上から右下（↘）に向かう対角線のマークされたセルの数
    let mut diag2_count = 0;                  // 右上から左下（↙）に向かう対角線のマークされたセルの数

    // ターンごとに選択された数字をビンゴカードにマークし、ビンゴをチェック
    let mut bingo_turn = -1;              // ビンゴが達成されるターン（1-based index）
    'outer: for turn in 0..t {            // 'outer: はラベル。（ラベル付きfor文）
        let num = a[turn];                // ターンごとに選択された数字
        let num_idx = (num - 1) as usize; // ビンゴカード上での数字のインデックス
        let i = num_idx / n;              // ビンゴカード上での行番号
        let j = num_idx % n;              // ビンゴカード上での列番号

        // マークを付ける
        marked[i][j] = true;

        // 行、列、対角線のマークされたセルの数を更新　
        row_counts[i] += 1;
        col_counts[j] += 1;
        // ここの判定は下で詳しく解説
        if i == j {　　　　　　　// マークされたセルが左上から右下（↘）に向かう対角線に存在するか
            diag1_count += 1;
        }
        if i + j == n - 1 {     // マークされたセルが右上から左下（↙）に向かう対角線に存在するか
            diag2_count += 1;
        }

        // ビンゴのチェック（行のビンゴ、列のビンゴ、対角線１のビンゴ、対角線２のビンゴをOR条件(||)で判定）
        //    row_counts[i] == n  ->  行のビンゴ
        //    col_counts[j] == n  ->  列のビンゴ
        //    diag1_count == n    ->  対角線１のビンゴ
        //    diag2_count == n    ->  対角線２のビンゴ
        if row_counts[i] == n || col_counts[j] == n || diag1_count == n || diag2_count == n {
            bingo_turn = (turn + 1) as i32; // ビンゴが達成されるターンを記録（1-based index）
            break 'outer;                   // ビンゴが達成されたのでループを抜ける
        }
    }

    println!("{}", bingo_turn);
}

// 'outer: のようなラベルがあることで、ネストされたforなどからも一度に外側のループまで終了させることができる
/*
    i == j　であれば左上から右下の対角線上にあるとなり、
    i + j == n - 1　であれば右上から左下の対角線上にあると判別できる理由

    ３ｘ３の行列で考える。行列はn x nなので、n=3となる。
    ３ｘ３の行列は、以下のような行列になり、座標で表すと以下になる
        1 2 3        (0, 0) (0, 1) (0, 2)
        4 5 6   =>   (1, 0) (1, 1) (1, 2)
        7 8 9        (2, 0) (2, 1) (2, 2)
    
    これで座標の合計値でそれぞれの対角線のケースを考える。

    【左上から右下の場合】
    対角線となるのは、「1, 5, 9」であり、座標は「(0, 0) (1, 1) (2, 2)」となる。
    よって、i == j が成り立つ。

    【右上から左下の場合】
    対角線となるのは、「3, 5, 7」であり、座標は「(0, 2) (1, 1) (2, 0)」となる。
    n=3なので、i + j == n - 1 が成り立つ。
*/
