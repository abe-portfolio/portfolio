SQLiteは多くのシステムでデフォルトで組み込まれている


①SQLiteデータベースファイルの作成（※プロジェクトのルートディレクトリ）

　　コマンド：cd <プロジェクトのルートディレクトリ>/database
　　コマンド：type NUL > <database名>.sqlite



②.envファイルの設定
　　設定箇所
　　　DB_CONNECTION=sqlite
　　　DB_DATABASE=<プロジェクトのルートディレクトリまでの絶対パス>/database/<database名>.sqlite


③マイグレーションの実行

　　コメンド：php artisan migrate


-------------------------------------------------------------------------------------

◆コマンド
===========================================================================
1.SQLiteの起動
  sqlite3 <datavase名>.db
===========================================================================
2.データベースの確認
  .tables
===========================================================================
3.テーブルの作成
  CREATE TABLE users (
      id INTEGER PRIMARY KEY,
      name TEXT,
      age INTEGER
  );
===========================================================================
4. テーブル名の修正
  ALTER TABLE users RENAME TO customers;
===========================================================================
5.テーブルの削除（DROP）
  DROP TABLE customers;
===========================================================================
6.テーブルの削除（TRUNCATEに相当）
  DELETE FROM users;
===========================================================================
7.列の追加
  ALTER TABLE users ADD COLUMN email TEXT;
===========================================================================
8. 列名の修正
  -- 現在のテーブルをリネーム
  ALTER TABLE users RENAME TO temp_users;

  -- 新しい構造のテーブルを作成
  CREATE TABLE users (
      id INTEGER PRIMARY KEY,
      name TEXT,
      full_name TEXT,
      age INTEGER,
      email TEXT
  );

  -- データを移行
  INSERT INTO users (id, name, full_name, age, email)
  SELECT id, name, name AS full_name, age, email
  FROM temp_users;

  -- 一時テーブルを削除
  DROP TABLE temp_users;
===========================================================================
9.列の削除
  -- 現在のテーブルをリネーム
  ALTER TABLE users RENAME TO temp_users;

  -- 新しい構造のテーブルを作成
  CREATE TABLE users (
      id INTEGER PRIMARY KEY,
      name TEXT,
      age INTEGER
  );

  -- データを移行
  INSERT INTO users (id, name, age)
  SELECT id, name, age
  FROM temp_users;

  -- 一時テーブルを削除
  DROP TABLE temp_users;
===========================================================================
10.行の追加
  INSERT INTO users (name, age, email) VALUES ('Alice', 30, 'alice@example.com');
===========================================================================
11.行の修正
  UPDATE users SET age = 31 WHERE name = 'Alice';
===========================================================================
12.行の削除
 DELETE FROM users WHERE name = 'Alice';
===========================================================================
13.テーブルデータの確認
  SELECT * FROM users;
===========================================================================
14. SQLiteの終了
  .exit
===========================================================================

※注意点※
　・RIGHT JOINおよびFULL OUTER JOINのサポートなし
　　→必要に応じてLEFT JOINやUNIONを組み合わせてこれらの操作をエミュレートする必要がある

　・ALTER TABLEの制約（列の削除、列の変更は国設サポートされていない）
　　→一時テーブル（新しいテーブル）を作成してデータを移行する必要がある
　　※新しい列を追加することは可能

　・デフォルトで外部キー制約が無効
　　→接続ごとに以下のコマンドを実行して外部キー制約を有効にする必要がある
　　　  PRAGMA foreign_keys = ON;

===========================================================================

