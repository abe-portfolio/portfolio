import numpy as np

# NumPyによる配列の動き
x = np.array([10,14,19])
x_2 = x * 2
# x_2 = [20,28,38]

# Pythonのデフォルト機能の配列の動き
y = ([10,14,19])
y_2 = y * 2
# y_2 = [10,14,19,10,14,19]


# 2次元配列
x2 = np.array(
    [[10,14,15],
     [20,24,26]]
)

# 3次元配列　カラー画像など
x3 = np.array(
    [[[10,11],[13,14],[16,17]],
     [[20,21],[23,24],[26,27]]]
)

# ndim 次元を調べる
print(x.ndim)
print(x2.ndim)
print(x3.ndim)

# Shape 各次元のサイズ(行数と要素数)を調べる
print(x.shape)
print(x2.shape)
print(x3.shape)


# z = [0, 0, 0]
z = np.xeros(3)

# z = [[0, 0, 0]
#      [0, 0, 0]]
z = np.zeros((2, 3))


# z1 = [1, 1, 1]
z1 = np.ones(3)

# z1 = [[1, 1, 1]
#       [1, 1, 1]]
z1 = np.ones((2, 3))


# ランダム値は0以上1未満
r = np.random.rand(3)
r = np.random.rand(2, 3)


# 高速に配列を作成(設定したい値は決まってないが、取り合えずある程度の大きさの配列が欲しい時に使用)
e = np.empty(3)
e = np.empty((2, 3))



#■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
# 配列の四則演算
x = np.array(
    [[10, 20, 30],
     [40, 50 ,60]]
)

result = x + 10
# result = [[20 30, 40],
#           [50, 60, 70]]



y = np.array(
    [[10, 12, 14],
     [20, 22, 24]]
)

z = np.array(
    [[30, 32, 34],
     [40, 42, 44]]
)

result = y + z
# result = [[40, 44, 48]
#           [60, 64, 68]]



#１次元の配列と多次元配列の演算
x = np.array([2, 3, 4])
# shapre:(3,)

y = np.array(
    [[5, 6, 7],
     [8, 9 ,10]]
)
# shape:(2, 3)

#１次元配列と多次元配列の最後の次元のサイズが同じなら演算可能
reuslt = x + y
# result = [[ 7,  9, 11]
#           [10, 12, 14]]



x = np.array(
    [[2],
     [3],
     [4]]
)

y = np.array(
    [[10, 11],
     [12, 13],
     [14, 15]]
)

result = x + y
# result = [[12, 13]
#           [15, 16]
#           [18, 19]]



# np.dot 行列の積
x = np.array(
    [[1, 2, 3],
     [4, 5, 6]]
)

y = np.array(
    [[11, 12],
     [13, 14],
     [15, 16]]
)

result = np.dot(x, y)
# result = [[ 82 88]     82：1*11 + 2*13 + 3*15   88：1*12 + 2*14 + 3*16
#           [199 214]]  199：4*11 + 5*13 + 6*15  214：4*12 + 5*14 + 6*16




#■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
# 配列の変形
# reshape：要素の値はそのままで、配列の形を変形する -> 総素数の変更はできない
x = np.array(
    [[10, 12, 14],
     [20, 22, 24]]
)
# shape:(2, 3)

result = x.reshape((3, 2))
# result = [[10 12]
#           [14 30]
#           [22 24]]



#flatten 要素のあたいはそのままで、１次元の配列に変形  
x = np.array(
    [[[1, 2], [3, 4], [5,6 ]],
     [[7, 8], [9, 10], [11, 12]]]
)
result = x.flatten()
# x = [1 2 3 4 5 6 7 8 9 10 11 12]



# 配列の中の一部にアクセス
# 下記のリストxのうち、１行目を取り出したい場合
x = np.array(
    [[1, 2, 3],
     [4, 5, 6]]
)
result = x[0, :]
# 行のインデックスが０、列は全て

# 同様に上記のリストxから、２列目を取り出したい場合
result = x[:, 1]
# 行は全て、列のインデックスは１

result = x[1, 1]
# result = 5



# 配列の結合
x = np.array(
    [[1, 2, 3],
     [4, 5, 6]]
)

y = np.array(
    [[10, 11, 12],
     [13, 14, 15]]
)

# 行に追加
result = np.concatenate([x, y], 0)
# result = [[ 1  2  3]
#           [ 4  5  6]
#           [10 11 12]
#           [13 14 15]]

# 列に追加
result = np.concatenate([x, y], 1)
# result = [[1 2 3 10 11 12]
#           [4 5 6 13 14 15]]











